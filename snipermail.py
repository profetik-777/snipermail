#!/usr/bin/env python3
"""
snipermail.py

A minimal TUI/CLI to set up a send-only mail relay on Linux/macOS using msmtp
and your Gmail account (via App Password). It will:
  1) Check for msmtp and suggest install commands.
  2) Create ~/.config/msmtp/config with sane defaults.
  3) Optionally set a ~/.mailrc aliases file for local username->Gmail.
  4) Send a test email.

Why msmtp? It's a lightweight sendmail-compatible SMTP client that many
self-hosted apps can use by pointing to a sendmail path. Perfect for
notifications.

Windows note: This script targets POSIX systems. On Windows, consider
hMailServer as a local relay (configure Gmail as a smarthost), or run this
on WSL and point your apps to that host.

Requirements: Python 3.7+, msmtp installed on the system.
"""
import os
import sys
import stat
import shutil
import subprocess
from pathlib import Path

CONFIG_DIR = Path.home() / ".config" / "msmtp"
CONFIG_FILE = CONFIG_DIR / "config"
ALIAS_FILE = Path.home() / ".aliases"

TLS_CANDIDATES = [
    "/etc/ssl/certs/ca-certificates.crt",  # Debian/Ubuntu/Arch
    "/etc/pki/tls/certs/ca-bundle.crt",    # RHEL/CentOS/Fedora
    "/etc/ssl/cert.pem",                   # macOS
]

INSTALL_HINTS = {
    "apt": "sudo apt update && sudo apt install -y msmtp msmtp-mta mailutils",
    "dnf": "sudo dnf install -y msmtp msmtp-mta mailx",
    "yum": "sudo yum install -y msmtp msmtp-mta mailx",
    "pacman": "sudo pacman -S --noconfirm msmtp msmtp-mta mailx",
    "zypper": "sudo zypper install -y msmtp msmtp-mta mailx",
    "brew": "brew install msmtp s-nail",
}


def which_pkgmgr():
    for mgr in ("apt", "dnf", "yum", "pacman", "zypper"):
        if shutil.which(mgr):
            return mgr
    if sys.platform == "darwin" and shutil.which("brew"):
        return "brew"
    return None


def choose_tls_file():
    for p in TLS_CANDIDATES:
        if os.path.exists(p):
            return p
    # fallback to the most common
    return TLS_CANDIDATES[0]


def pause():
    input("\nPress Enter to continue...")


def banner():
    print("=" * 70)
    print("Notify Mail Setup — msmtp + Gmail (send-only)")
    print("=" * 70)


def require_posix():
    if os.name != "posix":
        print("[ERROR] This helper targets Linux/macOS (POSIX).\n"
              "On Windows, try hMailServer as a local relay or run this under WSL.")
        sys.exit(1)


def ensure_msmtp():
    if shutil.which("msmtp"):
        return True
    print("[WARN] msmtp is not installed or not in PATH.")
    mgr = which_pkgmgr()
    if mgr:
        print("\nTry this install command for your system:\n")
        print(INSTALL_HINTS[mgr])
    else:
        print("\nPlease install msmtp manually for your distro.")
    return False


def prompt_nonempty(label: str, default: str = None) -> str:
    while True:
        val = input(f"{label}{f' [{default}]' if default else ''}: ").strip()
        if not val and default:
            return default
        if val:
            return val
        print("  Please enter a value.")


def write_config(gmail_addr: str, app_password: str, from_name: str, tls_file: str):
    CONFIG_DIR.mkdir(parents=True, exist_ok=True)
    template = f"""
# msmtp configuration generated by notify_mail_setup.py
# Docs: man msmtp

defaults
auth           on
tls            on
tls_trust_file {tls_file}
logfile        {str(CONFIG_DIR / 'msmtp.log')}

account        gmail
host           smtp.gmail.com
port           587
from           {gmail_addr}
user           {gmail_addr}
passwordeval   "cat {str(CONFIG_DIR / 'app_password.txt')}"

# You can add more accounts below if needed.
# account       other
# host          smtp.example.com
# ...

auto_from      on
maildomain     local
aliases        {str(ALIAS_FILE)}

defaults
account default : gmail
""".lstrip()
    CONFIG_FILE.write_text(template)
    # Write secret in a separate file (simpler than keyring for portability)
    (CONFIG_DIR / "app_password.txt").write_text(app_password + "\n")

    # Permissions
    os.chmod(CONFIG_FILE, stat.S_IRUSR | stat.S_IWUSR)
    os.chmod(CONFIG_DIR / "app_password.txt", stat.S_IRUSR | stat.S_IWUSR)

    # Aliases file (map local users to your Gmail)
    if not ALIAS_FILE.exists():
        user = os.environ.get("USER") or os.environ.get("LOGNAME") or "root"
        ALIAS_FILE.write_text(f"root: {gmail_addr}\n{user}: {gmail_addr}\n")

    print(f"\n[OK] Wrote {CONFIG_FILE}")
    print(f"[OK] Wrote {(CONFIG_DIR / 'app_password.txt')} (600 perms)")
    print(f"[OK] Ensured {ALIAS_FILE} exists")


def send_test(gmail_addr: str, to_addr: str):
    subject = "msmtp notify test"
    body = "If you received this, your msmtp relay is working."
    msg = f"Subject: {subject}\nTo: {to_addr}\nFrom: {gmail_addr}\n\n{body}\n"
    try:
        proc = subprocess.run([
            "msmtp", "-a", "gmail", to_addr
        ], input=msg.encode(), stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
        print("\n[OK] Test message queued via msmtp.")
    except FileNotFoundError:
        print("[ERROR] msmtp not found. Install it and re-run the test.")
    except subprocess.CalledProcessError as e:
        print("\n[ERROR] msmtp returned an error:\n")
        print(e.stderr.decode() or str(e))


def main():
    banner()
    require_posix()

    if not ensure_msmtp():
        print("\nInstall msmtp, then re-run this script.")
        sys.exit(1)

    print("\nThis will configure msmtp to use Gmail SMTP for send-only notifications.\n"
          "Prerequisites:\n"
          "  • Turn on 2‑Step Verification for your Google account\n"
          "  • Create an App Password for ‘Mail’ on ‘Other’ (custom name)\n"
          "  • Keep that 16‑char app password handy (no spaces)\n")
    pause()

    gmail = prompt_nonempty("Your Gmail address")
    from_name = input("From display name [optional]: ").strip()
    app_pw = prompt_nonempty("Gmail App Password (16 chars, no spaces)")

    tls = choose_tls_file()

    write_config(gmail_addr=gmail, app_password=app_pw, from_name=from_name, tls_file=tls)

    print("\n(Optional) Make msmtp the system sendmail so apps can just call \"sendmail\":")
    print("  sudo ln -sf $(command -v msmtp) /usr/sbin/sendmail    # Debian/Ubuntu/Arch")
    print("  sudo alternatives --set mta /usr/bin/msmtp-mta         # RHEL/Fedora (if installed)")

    to_addr = input("\nSend a test email to (default = your Gmail): ").strip() or gmail
    send_test(gmail_addr=gmail, to_addr=to_addr)

    print("\nUsage tips:\n"
          "  • Point apps to sendmail path: /usr/sbin/sendmail (msmtp-compatible)\n"
          "  • Or configure SMTP directly with: smtp.gmail.com:587, STARTTLS, user/pass (app pw)\n"
          "  • Logs: see ~/.config/msmtp/msmtp.log\n")

if __name__ == "__main__":
    main()
